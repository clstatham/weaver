// Ignored
WHITESPACE    = _{ " " | "\t" | NEWLINE }
COMMENT       = _{ line_comment | block_comment }
line_comment  = _{ "//" ~ (!NEWLINE ~ ANY)* }
block_comment = _{ "/*" ~ (block_comment | (!"*/" ~ ANY))* ~ "*/" }

// Tokens
period     = _{ "." }
comma      = _{ "," }
colon      = _{ ":" }
semi       = _{ ";" }
lparen     = _{ "(" }
rparen     = _{ ")" }
lbrack     = _{ "[" }
rbrack     = _{ "]" }
lbrace     = _{ "{" }
rbrace     = _{ "}" }
plus       =  { "+" }
minus      =  { "-" }
star       =  { "*" }
slash      =  { "/" }
percent    =  { "%" }
eq         =  { "=" }
plus_eq    =  { "+=" }
minus_eq   =  { "-=" }
star_eq    =  { "*=" }
slash_eq   =  { "/=" }
percent_eq =  { "%=" }

// Literals

letter         =  { ASCII_ALPHA | "_" }
string_literal = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
float_literal  = @{ ASCII_DIGIT+ ~ period ~ ASCII_DIGIT+ }
int_literal    = @{ ASCII_DIGIT+ }
literal        = _{ float_literal | int_literal | string_literal }
ident          = @{ (letter | "_") ~ (letter | ASCII_DIGIT | "_")* }

// Keywords
component = _{ "component" }
system    = _{ "system" }
query     = _{ "query" }
with      = _{ "with" }
without   = _{ "without" }
let       = _{ "let" }
var       = _{ "var" }

// Types
int             = { "int" }
float           = { "float" }
typ             = { int | float | ident }
let_ident       = { let ~ ident }
var_ident       = { var ~ ident }
typed_ident     = { ident ~ colon ~ typ }
let_typed_ident = { let ~ ident ~ colon ~ typ }
var_typed_ident = { var ~ ident ~ colon ~ typ }

// Top level
program    = { SOI ~ statements ~ EOI }
statements = { statement* }

// Statements
block          = { lbrace ~ statements ~ rbrace }
statement      = { (component_stmt | system_stmt | query_stmt | expr) ~ ";" }
component_stmt = { component ~ ident ~ lbrace ~ (typed_ident ~ semi)* ~ rbrace }
system_stmt    = { system ~ ident ~ block }
query_stmt     = { query ~ lbrack ~ typed_args ~ rbrack ~ with_clause? ~ without_clause? ~ block }
typed_args     = { ((var_typed_ident | let_typed_ident) ~ comma)* ~ (var_typed_ident | let_typed_ident)? }
with_clause    = { with ~ lbrack ~ (typ ~ comma)* ~ typ? ~ rbrack }
without_clause = { without ~ lbrack ~ (typ ~ comma)* ~ typ? ~ rbrack }

// Expressions
prefix       = _{ minus }
infix        = _{ plus | minus | star | slash | percent }
call_expr    =  { ident ~ lparen ~ (expr ~ comma)* ~ expr? ~ rparen }
member_expr  =  { ident ~ period ~ ident }
assign_expr  =  { (member_expr | ident) ~ (plus_eq | minus_eq | star_eq | slash_eq | percent_eq | eq) ~ expr }
decl_expr    =  { (var_ident | let_ident) ~ eq ~ expr }
primary_expr = _{ literal | call_expr | decl_expr | assign_expr | member_expr | ident | block | (lparen ~ expr ~ rparen) }
expr         =  { primary_expr ~ (infix ~ prefix? ~ primary_expr)* }
